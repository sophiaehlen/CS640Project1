#!/usr/bin/env python3

'''
Ethernet learning switch in Python: HW3.

Note that this file currently has the code to implement a "hub"
in it, not a learning switch.  (I.e., it's currently a switch
that doesn't learn.)
'''
from switchyard.lib.address import *
from switchyard.lib.packet import *
from switchyard.lib.common import *
import time



def switchy_main(net):
    my_interfaces = net.interfaces() 
    print("\nmy_interfaces: " + str(my_interfaces))
    mymacs = [intf.ethaddr for intf in my_interfaces]
    print("mymacs: " + str(mymacs) + "\n")
    size = 0
    ft = {}
    while True:
        #global ft
        try:
            dev,packet = net.recv_packet() #try to receive a pkt from any available device, block until one is received
            print("dev: " + dev)
        except NoPackets:
            continue
        except Shutdown:
            return
       


	# If we get here, then a packet MUST have been received

        #print("packet src MAC: " + str(packet[0].src)) # TODO remove
        #print("packet destination: " + str(packet[0].dst))
        #print("packet source: " + str(packet[0].src))
        #print("net name: " + str(net.name)) #hub tests
        #print("full packet: " + str(packet)) # TODO remove

        # Create an empty forwarding table, to be populated later
        #ft = {}
        # we index the forwarding table with the dev (the interface name value that gets the packet) because when we 
        # receive a packet we store the address of the host on the other end of the eth addr so if we get a pkt
        # with that source we know what port to use to send the pkt there, because we know the source, we know how to send it there
        
        #ft[dev] = packet[0].src # THIS WORKS DON'T DELETE
        #print(ft) 


        log_debug ("In {} received packet {} on {}".format(net.name, packet, dev))
        if packet[0].dst in mymacs:  # TODO write a test to see what happens when pkt intended for it
            #ft[dev] = [packet[0].src, time.time()]
            log_debug ("Packet intended for me")
            print("packet intended for me")

        # we have the key which is the interface name, if the intf.name we have is in the ft, check its values. These values are 
        # the host addresses. When we receive them they're sources, when we send them they're destinations.
        # This way we can determine which host addresses is associated with a particular interface name. 
        # If the host address that we want to send to is not found within that interface (the key), then we will add it to values for
        # that key

 

        else:
            #print("\nHIT ELSE!!!!!!!!!")
 
            found = False
            
            if (str(packet[0].dst) == "ff:ff:ff:ff:ff:ff"):
                print("broadcast address")
                found = True
                for intf in my_interfaces:
                    if dev != intf.name:
                        log_debug ("Flooding packet {} to {}".format(packet, intf.name))
                        net.send_packet(intf.name, packet) #send packet from current int port


            print (size)
            # table update block, size check
            if size>=5:
                if ([packet[0].src in ft):
                    ft[packet[0].src] = [dev, time.time()]
              
                else:
                    lowestname = 'name'
                    lowest = time.time()
                    for k, v in ft.items():
                        print("in update block k: "+str(k)+ " v: " + str(v[1])+" lowest: "+str(lowest))
                        if(v[1] < lowest):
                            lowest = v[1]
                            lowestname = k
                            print("new lowest "+str(lowest)+"  new lowestname: "+str(lowestname))
                    del ft[lowestname]
                    ft[packet[0].src] = [dev, time.time()]

            # don't have to deal with size
            else:
                if src not in ft:
                    print("inc size")
                    size = size + 1
                    print(size)
                ft[packet[0].src] = [dev, time.time()]
 
            # if size is now okay, then compare the dest and value to see if we should send the packet
            if (packet[0].src == packet[0].dst):
                found = True

            higestName = "name"
            highest = 0
            delList = []
            if(not found):
         
                for k, v in ft.items():
                    print("k:" +str(k)+ " dest, v: " +str(packet[0].src) +' ' + str(v))
     
                    if (k == packet[0].dst):
                        found = True
                        print(str(k)+"  highest: "+str(highest)+" v[1]:"+str(v[1]))
                        if (highest < v[1]):
                            print ("highestName: "+highestName+" highest:"+str(highest))
                            if(not (highest==0)):
                                delList.append(highestName)
                                highestName = k
                                highest = v[1]
                                print("new HighestName: "+highestName+"  highest:"+str(highest))
                        else:
                            highestName = k
                            highest = v[1]
                            print("ELSE: new HighestName: "+highestName+" highest:"+str(highest))
                   else:
                       print("else")
                       deList.append(k)
           if(found):
               print("sent on k: "+str(k)+" / highestName: "+highestName)
               net.send_packet(highestName, packet
                                 
         
              
               

            if not found:
                for intf in my_interfaces:

                #if packet[0].dst in ft: # if the packet dst is in the forwarding table...
                #    print("dst is in ft")
                #    net.send_packet(ft.get(packet[0].dst), packet) # send the packet to the interface assoc. with the dst in ft
                #print("dev = " + dev + ", intf.name = " + intf.name)
                    if dev != intf.name:
                        log_debug ("Flooding packet {} to {}".format(packet, intf.name))
                        net.send_packet(intf.name, packet) #send packet from current int port

            print("\nprinting ft..")
            for key, value in ft.items():
                print (key, value)
       

            print("\nrelooping\n")


               # TODO if destination is that broadcast address, then send it out over everything
    net.shutdown()
